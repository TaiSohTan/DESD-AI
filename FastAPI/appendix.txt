
"""
# Define request model with proper validation
class PredictionRequest(BaseModel):
    GeneralRest: float = Field(..., example=1000.0, description="General rest value")
    GeneralFixed: float = Field(..., example=500.0, description="General fixed value")
    SpecialEarningsLoss: float = Field(..., example=200.0, description="Special earnings loss value")
    Injury_Prognosis: float = Field(..., example=6.0, description="Injury prognosis in months")
    SpecialTherapy: float = Field(..., example=150.0, description="Special therapy value")
    SpecialAssetDamage: float = Field(..., example=300.0, description="Special asset damage value")
    SpecialFixes: float = Field(..., example=450.0, description="Special fixes value")
    SpecialUsageLoss: float = Field(..., example=50.0, description="Special usage loss value")
    AccidentType: str = Field(..., example="Rear end", description="Type of accident")
    SpecialJourneyExpenses: float = Field(..., example=75.0, description="Special journey expenses")
    Days_Between_Accident_And_Claim: float = Field(..., example=30.0, description="Days between accident and claim")
    Vehicle_Age: float = Field(..., example=5.0, description="Vehicle age in years")
    Driver_Age: float = Field(..., example=35.0, description="Driver age in years")
    SpecialLoanerVehicle: float = Field(..., example=0.0, description="Special loaner vehicle value")
    SpecialOverage: float = Field(..., example=0.0, description="Special overage value")
    GeneralUplift: float = Field(..., example=100.0, description="General uplift value")
    Accident_Description: str = Field(..., example="Rear-ended at a stoplight.", description="Description of accident")
    Exceptional_Circumstances: bool = Field(..., example=False, description="Whether there were exceptional circumstances")
    Minor_Psychological_Injury: bool = Field(..., example=True, description="Whether there was minor psychological injury")
    Injury_Description: str = Field(..., example="Whiplash and minor bruises.", description="Description of injury")

    SpecialHealthExpenses: float = Field(..., example=250.0, description="Health-related expenses")
    SpecialAdditionalInjury: float = Field(..., example=150.0, description="Additional injury compensation")
    SpecialMedications: float = Field(..., example=120.0, description="Medication expenses")
    SpecialRehabilitation: float = Field(..., example=300.0, description="Rehabilitation costs")
    SpecialTripCosts: float = Field(..., example=80.0, description="Trip costs")
    Number_of_Passengers: float = Field(..., example=2.0, description="Number of passengers in vehicle")

    Whiplash: bool = Field(..., example=True, description="Whether whiplash occurred")
    Police_Report_Filed: bool = Field(..., example=True, description="Whether police report was filed")
    Witness_Present: bool = Field(..., example=False, description="Whether witnesses were present")

    Gender: str = Field(..., example="Male", description="Gender of claimant")
    Vehicle_Type: str = Field(..., example="Car", description="Type of vehicle")
    Weather_Conditions: str = Field(..., example="Rainy", description="Weather conditions")
    Dominant_injury: str = Field(..., example="Legs", description="Dominant injury area")
"""


# Define a flexible request model
class FlexiblePredictionRequest(BaseModel):
    # This will accept any dictionary of values
    data: Dict[str, Any]
    
    @validator('data')
    def validate_minimum_fields(cls, v):
        # Ensure critical fields exist
        required_fields = ["AccidentType", "Accident_Description", "Injury_Description"]
        for field in required_fields:
            if field not in v:
                raise ValueError(f"Missing required field: {field}")
                
        # Validate data types for critical fields
        if not isinstance(v.get("AccidentType", ""), str):
            raise ValueError("AccidentType must be a string")
            
        return v

"""
@app.get("/")
async def root():
    return {"message": "Welcome to the Settlement Value Prediction API"}
"""

@app.get("/", response_class=HTMLResponse)
async def root():
    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Settlement Prediction API</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            body {
                height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                background-color: #f8f9fa;
            }
            .welcome-card {
                max-width: 600px;
                padding: 40px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                background-color: white;
                border-radius: 10px;
                text-align: center;
            }
            .btn-primary {
                background-color: #2471a3;
                border-color: #2471a3;
                padding: 12px 30px;
                font-size: 18px;
                margin-top: 20px;
            }
            .btn-primary:hover {
                background-color: #1a5276;
                border-color: #1a5276;
                transform: translateY(-2px);
                transition: all 0.3s;
            }
            h1 {
                color: #2471a3;
                margin-bottom: 20px;
            }
            p {
                font-size: 18px;
                color: #666;
                margin-bottom: 30px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="welcome-card">
                <h1>Settlement Prediction API</h1>
                <p>Use our advanced machine learning model to predict insurance settlement values based on claim details.</p>
                <a href="/form" class="btn btn-primary btn-lg">Go to Prediction Form</a>
            </div>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.post("/predict", response_model=PredictionResponse)
async def predict_settlement(request: PredictionRequest):
    try:
        # Convert request to dictionary
        input_data = request.dict()
        
        # 1. Preprocess categorical features
        
        # Target encode AccidentType
        input_data["AccidentType"] = encode_accident_type(input_data["AccidentType"])
        
        # One-hot encode Accident_Description
        accident_desc_encoding = encode_accident_description(input_data["Accident_Description"])
        del input_data["Accident_Description"]  # Remove original field
        input_data.update(accident_desc_encoding)  # Add encoded fields
        
        # One-hot encode Injury_Description
        injury_desc_encoding = encode_injury_description(input_data["Injury_Description"])
        del input_data["Injury_Description"]  # Remove original field
        input_data.update(injury_desc_encoding)  # Add encoded fields
        
        # 2. Convert boolean features to integers
        input_data["Exceptional_Circumstances"] = int(input_data["Exceptional_Circumstances"])
        input_data["Minor_Psychological_Injury"] = int(input_data["Minor_Psychological_Injury"])
        
        # 3. Standardize numerical features
        input_data = standardize_numerical(input_data)
        
        # 4. Convert to DataFrame
        df = pd.DataFrame([input_data])
        
        # 5. Make prediction
        prediction = model.predict(df)[0]
        
        # Return the prediction
        return PredictionResponse(settlement_value=float(prediction))
    
    except Exception as e:
        # Log the error
        print(f"Error making prediction: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Prediction error: {str(e)}")